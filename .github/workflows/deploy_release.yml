name: Deploy release
on:
  push:
    tags:
      - v*

jobs:
  create_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    steps:
      - name: Creating release
        run: |
          export TAG="${{ github.ref_name }}"
          gh release create ${{ github.ref_name }} -R ${{ github.repository }} --verify-tag --title "Version ${TAG:1}" --generate-notes --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  macos:
    name: Create macOS package (Intel)
    needs: create_release
    runs-on: macos-12
    timeout-minutes: 240
    env:
      QT_VERSION: "6.4.2"
      EXTRA_CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release -DVC_PREBUILT_LIBS=ON -DVC_BUILD_ACVD=ON"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 20

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install ninja python@3.10

      - name: Install Qt6
        run: |
          python3.10 -m pip install --upgrade pip setuptools wheel
          python3.10 -m pip install aqtinstall
          aqt install-qt -O ${{ github.workspace }}/Qt/ mac desktop ${QT_VERSION}

      - name: Install vc-deps
        run: |
          git submodule update --init
          cmake -S vc-deps/ -B vc-deps/build/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_MESSAGE=NEVER -DVCDEPS_BUILD_ACVD=OFF
          cmake --build vc-deps/build/

      - name: Build volume-cartographer
        run: |
          export CMAKE_INSTALL_PREFIX="packaged_install/"
          cmake -S . -B build/ -GNinja ${EXTRA_CMAKE_FLAGS} -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Qt/${QT_VERSION}/macos/lib/cmake/
          cmake --build build/
          echo "install_dir=${CMAKE_INSTALL_PREFIX}" >> ${GITHUB_ENV}

      - name: Create package
        run: |
          cmake --install build/ --prefix "${{ env.install_dir }}"
          python3.10 utils/scripts/macos_codesign_release.py -i "${{ env.install_dir }}"
          ARCH=$(uname -m)
          PKG_NAME="VC-${GITHUB_REF_NAME:1}-Darwin-${ARCH}.zip"
          ditto -c -k "${{ env.install_dir }}" ${PKG_NAME}
          echo "package_name=${PKG_NAME}" >> ${GITHUB_ENV}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.1
        if: success()
        with:
          path: ${{ env.package_name }}

      - name: Upload to release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          gh release upload ${{ github.ref_name }} "${{ env.package_name }}" -R ${{ github.repository }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
