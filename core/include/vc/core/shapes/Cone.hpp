#pragma once

/** @file */

#include <cmath>
#include <cstddef>

#include <opencv2/core.hpp>

#include "ShapePrimitive.hpp"

namespace volcart::shapes
{
/**
 * @author Melissa Shankle
 * @date 1/29/16
 *
 * @brief Cone shape
 *
 * This class builds a right-circular cone shape with a circular base centered
 * at the origin.
 *
 * The recursion level determines the number of points along the circumference
 * of the circular base. For a recursion level \f$ r \f$ , the number of
 * points in the base will be \f$ 8 * 2^{r}\f$.
 *
 * The shape will have a number of points equal to the number of points in the
 * base (see above) plus two. The points generated by this class are unordered.
 *
 * @ingroup Shapes
 */
class Cone : public ShapePrimitive
{
public:
    Cone(int radius = 2, int height = 5, int recursion = 5, bool closed = true)
    {
        std::vector<cv::Vec3d> circle_list;
        cv::Vec3d c_point;

        // add beginning 8 points of circle
        for (double l = 0.0; l < 2 * M_PI; l += (M_PI / 4)) {
            c_point[0] = radius * cos(l);
            c_point[1] = radius * sin(l);
            c_point[2] = height;
            circle_list.push_back(c_point);
        }

        int r = 0;
        while (r != recursion) {
            std::vector<cv::Vec3d> loop_list;
            loop_list = circle_list;
            circle_list.clear();
            // number of section to calculate angle at each vertex
            double theta_inc = (2 * M_PI) / ((r + 2) * 8);
            double theta = 0.0;
            for (int p_id = 0; p_id < ((r + 2) * 8); p_id++) {

                // x value that will be on circle
                c_point[0] = radius * cos(theta);
                // y value that will be on circle
                c_point[1] = radius * sin(theta);
                c_point[2] = height;
                circle_list.push_back(c_point);

                theta += theta_inc;
            }
            r++;
        }

        // generate the starting vertices
        // cone point
        addVertex_(0, 0, 0);
        // mid point of circle
        if (closed) {
            addVertex_(0, 0, height);
        }

        // generate the circle points
        for (auto& point : circle_list) {
            addVertex_(point[0], point[1], point[2]);
        }

        // generate the cells for faces
        // Our two "center" points are v_id 0 && 1, so start at 2
        int B;
        std::size_t v_id = (closed) ? 2 : 1;
        for (; v_id < points_.size(); ++v_id) {

            // Handle the last point in the circle
            if (v_id == points_.size() - 1) {
                B = (closed) ? 2 : 1;
            } else {
                B = v_id + 1;
            }

            addCell_(B, v_id, 0);
            if (closed) {
                addCell_(v_id, B, 1);
            }
        }

    }  // Constructor

};  // Cone
}  // namespace volcart::shapes
