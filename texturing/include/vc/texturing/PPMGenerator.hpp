#pragma once

/** @file */

#include <cstddef>

#include "vc/core/types/ITKMesh.hpp"
#include "vc/core/types/Mixins.hpp"
#include "vc/core/types/PerPixelMap.hpp"
#include "vc/core/types/UVMap.hpp"

namespace volcart::texturing
{
/**
 * @brief Generates a PerPixelMap from an ITKMesh and a UVMap
 *
 * Rasters a UVMap and embeds the raster with 2D-to-3D lookup information. Each
 * pixel in the PPM stores a vector of six double-precision floats which
 * correspond to the 3D position and normal vector associated with that pixel:
 * `{x, y, z, nx, ny, nz}`
 *
 * This class uses raytracing functionality provided by the
 * [bvh library](https://github.com/madmann91/bvh).
 *
 * @see volcart::PerPixelMap
 * @ingroup Texture
 */
class PPMGenerator : public IterationsProgress
{
public:
    /**@{*/
    /** @brief Pixel normal shading method */
    enum class Shading {
        /** @brief Each pixel inherits the face's normal */
        Flat = 0,
        /**
         * @brief Each pixel's normal is a linear interpolation of the face's
         * vertex normals. This is similar to Phong shading.
         */
        Smooth
    };

    /** Default constructor */
    PPMGenerator() = default;

    /** Construct with dimension parameters */
    PPMGenerator(std::size_t h, std::size_t w);
    /**@}*/

    /**@{*/
    /** @brief Set the input mesh */
    void setMesh(const ITKMesh::Pointer& m);

    /** @brief Set the input UV map */
    void setUVMap(const UVMap::Pointer& u);
    /**@}*/

    /**@{*/
    /** @brief Set the dimensions of the output PPM */
    void setDimensions(std::size_t h, std::size_t w);

    /** @brief Set the normal shading method */
    void setShading(Shading s);
    /**@}*/

    /**@{*/
    /** @brief Compute the PerPixelMap */
    auto compute() -> PerPixelMap::Pointer;
    /**@}*/

    /**@{*/
    /** @brief Get the generated PerPixelMap */
    [[nodiscard]] auto getPPM() const -> PerPixelMap::Pointer;
    /**@}*/

    /** @brief Returns the maximum progress value */
    [[nodiscard]] auto progressIterations() const -> std::size_t override;

private:
    /** Input mesh */
    ITKMesh::Pointer inputMesh_;
    /** Input UV Map */
    UVMap::Pointer uvMap_;

    /** Working mesh */
    ITKMesh::Pointer workingMesh_;
    /** Output PerPixelMap */
    PerPixelMap::Pointer ppm_;
    /** Output shading */
    Shading shading_{Shading::Smooth};
    /** Output width of the PerPixelMap */
    std::size_t width_{0};
    /** Output height of the PerPixelMap */
    std::size_t height_{0};
};

/**
 * @brief Generate a cell map image
 *
 * The cell map contains the 3D face assignment for each pixel in a
 * virtually unwrapped image. Normally the cell map is created as a by-product
 * of running a PPMGenerator. However, older PPM files may not have a cell map,
 * so this method is provided as a convenience.
 *
 * @note Cell maps have always been generated, but were not serialized until
 * version 2.22. That version also introduced a more reliable method for
 * generating cell maps which may not produce the exact same results as the
 * previous method. As such, the cell map generated by this function may not
 * exactly correspond with the cell map used to generate an old PPM.
 */
auto GenerateCellMap(
    const ITKMesh::Pointer& mesh,
    const UVMap::Pointer& uv,
    std::size_t height,
    std::size_t width) -> cv::Mat;

}  // namespace volcart::texturing
